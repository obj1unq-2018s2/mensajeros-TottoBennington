import mensajeros.*

test "La mensajeria tiene a neo como empleado si lo agregarmos" {
	mensajeria.contratar(neo)
	assert.that(mensajeria.empleados().contains(neo))
}

test "Si neo es empleado, Hay un mensajero que puede enviar el paquete" {
	mensajeria.contratar(neo)
	paquete.estaPagado()
	paquete.destino(matrix)
	assert.that(mensajeria.empleados().contains(neo))
}

test "roberto puede llevar 1 paquete pagado en 1 acoplado"{
	camion.cantAcoplados(1)
	roberto.pesoPropio(90)
	roberto.vehiculo(camion)
	paquete.estaPagado(true)
	paquete.destino(puenteDeBrooklyn)
	assert.that(paquete.puedeSerEntregadoPor(roberto))
}
test "neo no puede llevar paquete sin pagar a matrix"{
	neo.credito(true)
	paquete.estaPagado(false)
	paquete.destino(matrix)
	assert.that(!paquete.puedeSerEntregadoPor(neo))
}

//test "contratar"{
//	mensajeria.contratar(neo)
//	assert.that(mensajeria.empleados().any({m=>m == neo}))
//}

test "despedir"{
	mensajeria.contratar(neo)
	mensajeria.despedir(neo)
	assert.that(!mensajeria.empleados().contains(neo))
}

test "despedir a todos"{
	mensajeria.contratar(neo)
	mensajeria.contratar(chuckNorris)
	mensajeria.despedirAtodos()
	assert.that(mensajeria.empleados().isEmpty())
}
test "grande mensajeria"{
	mensajeria.contratar(neo)
	mensajeria.contratar(chuckNorris)
	assert.that(mensajeria.esGrandeLaMensajeria())
}
test "El paquete puede ser entregado por algun mensajero de la empresa"{
	mensajeria.contratar(neo)
	mensajeria.contratar(chuckNorris)
	camion.cantAcoplados(1) // Para evitar error de cantAcoplados siendo nulo
	mensajeria.contratar(roberto)
	paquete.destino(matrix)
	paquete.estaPagado(true)
	assert.that(mensajeria.puedeEntregar(paquete))
}
test "El paquete puede ser entregado por todos mensajeros de la empresa"{
	mensajeria.contratar(neo)
	neo.credito(true)
	mensajeria.contratar(chuckNorris)
	camion.cantAcoplados(1) // Para evitar error de cantAcoplados siendo nulo
	mensajeria.contratar(roberto)
	paquete.destino(puenteDeBrooklyn)
	paquete.estaPagado(true)
	assert.that(mensajeria.paqueteFacil(paquete))
}
test "candidatos para llevar 1 paquete"{
	camion.cantAcoplados(1) // Para evitar error de cantAcoplados siendo nulo
	var candidatos = [neo, chuckNorris, roberto]
	mensajeria.contratar(neo)
	neo.credito(true)
	mensajeria.contratar(chuckNorris)
	mensajeria.contratar(roberto)
	paquete.destino(puenteDeBrooklyn)
	paquete.estaPagado(true)
	assert.equals(candidatos, mensajeria.candidatosParaLlevar(paquete))
}
test "Sobre peso"{
	mensajeria.contratar(neo)
	mensajeria.contratar(chuckNorris)
	camion.cantAcoplados(1)
	mensajeria.contratar(roberto)
	paquete.destino(puenteDeBrooklyn)
	paquete.estaPagado(true)
	mensajeria.enviarPaquete(paquete)
	assert.that(mensajeria.paquetesEnviadosDeMensajeria().contains(paquete))
}